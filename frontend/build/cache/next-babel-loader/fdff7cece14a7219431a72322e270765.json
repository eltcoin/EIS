{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nexport var TX_UPDATE = 'TX_UPDATE';\nexport function trackTx(ev, txhash) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(txUpdate(txhash, {\n                  status: 'processing'\n                }));\n                ev.on('receipt', function (receipt) {\n                  dispatch(txUpdate(txhash, {\n                    status: 'received',\n                    receipt: receipt\n                  }));\n                });\n                ev.on('confirmation', function (confirmationNumber, receipt) {\n                  dispatch(txUpdate(txhash, {\n                    status: 'confirmed',\n                    confirmationNumber: confirmationNumber,\n                    receipt: receipt\n                  }));\n                });\n                ev.on('error', function (err) {\n                  dispatch(txUpdate(txhash, {\n                    status: 'error',\n                    err: err\n                  }));\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function txUpdate(txhash, info) {\n  return {\n    type: TX_UPDATE,\n    txhash: txhash,\n    info: info\n  };\n}","map":null,"metadata":{},"sourceType":"module"}